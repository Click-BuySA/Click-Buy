"""add user_email column to login table

Revision ID: 19c4c3a0ce70
Revises: dd54e0ffc75b
Create Date: 2023-08-04 17:25:25.561970

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '19c4c3a0ce70'
down_revision: Union[str, None] = 'dd54e0ffc75b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('login', sa.Column('user_email', sa.String(length=255), nullable=False))
    op.drop_constraint('login_user_id_key', 'login', type_='unique')
    op.create_unique_constraint(None, 'login', ['user_email'])
    op.drop_constraint('login_user_id_fkey', 'login', type_='foreignkey')
    op.create_foreign_key(None, 'login', 'users', ['user_email'], ['email'])
    op.drop_column('login', 'user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('login', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'login', type_='foreignkey')
    op.create_foreign_key('login_user_id_fkey', 'login', 'users', ['user_id'], ['id'])
    op.drop_constraint(None, 'login', type_='unique')
    op.create_unique_constraint('login_user_id_key', 'login', ['user_id'])
    op.drop_column('login', 'user_email')
    # ### end Alembic commands ###
